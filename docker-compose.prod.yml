services:
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
  backend:
    build:
      context: .
      dockerfile: ./reacjdjangoapp/Dockerfile.prod
    command: >
      sh -c "python manage.py migrate --noinput && \
        python manage.py collectstatic --noinput && \
        gunicorn reacjdjangoapp.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/code/staticfiles_collected
      - react_build_volume:/code/reacjdjangoapp/static/react_build
    expose:
      - 8000
    depends_on:
      - db
      - frontend
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - NODE_ENV=${NODE_ENV}
    restart: unless-stopped
  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile.prod
    volumes:
      - react_build_volume:/static/frontend
  proxy:
    image: nginx:1.25.3-alpine
    volumes:
      - static_volume:/staticfiles:ro
      - react_build_volume:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  
volumes:
  postgres_data:
  static_volume:
  react_build_volume:
